#!/usr/bin/env python3
"""
Test script to verify Tor proxy and redirect fixes
"""

import sys
import os
sys.path.insert(0, '/home/runner/.local/lib/python3.12/site-packages')

import logging
import aviso_automation

def test_tor_ip_detection():
    """Test Tor IP detection without browser"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP...")
    
    tor_mgr = aviso_automation.TorManager()
    
    # Test real IP detection (may fail in sandbox)
    print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP...")
    real_ip = tor_mgr.get_real_ip()
    if real_ip:
        print(f"   ‚úÖ –†–µ–∞–ª—å–Ω—ã–π IP: {real_ip}")
    else:
        print("   ‚ö† –†–µ–∞–ª—å–Ω—ã–π IP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ)")
    
    # Test Tor detection via requests (will fail without Tor)
    print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Tor —á–µ—Ä–µ–∑ HTTP...")
    tor_ip = tor_mgr.get_tor_ip_via_2ip()
    if tor_ip:
        print(f"   ‚úÖ IP —á–µ—Ä–µ–∑ Tor: {tor_ip}")
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP —á–µ—Ä–µ–∑ Tor (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Tor)")
    
    return True

def test_user_agent_manager():
    """Test User Agent manager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User Agent Manager...")
    
    ua_mgr = aviso_automation.UserAgentManager()
    
    # Test getting user agent for test user
    test_username = "test_user"
    ua1 = ua_mgr.get_user_agent(test_username)
    ua2 = ua_mgr.get_user_agent(test_username)
    
    print(f"   User Agent 1: {ua1[:50]}...")
    print(f"   User Agent 2: {ua2[:50]}...")
    
    if ua1 == ua2:
        print("   ‚úÖ User Agent –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        print("   ‚ùå User Agent –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω")
    
    return ua1 == ua2

def test_configuration():
    """Test configuration and imports"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # Test imports
    try:
        from seleniumbase import Driver
        print("   ‚úÖ SeleniumBase –∏–º–ø–æ—Ä—Ç")
    except ImportError as e:
        print(f"   ‚ùå SeleniumBase –æ—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        print("   ‚úÖ Selenium –∏–º–ø–æ—Ä—Ç—ã")
    except ImportError as e:
        print(f"   ‚ùå Selenium –æ—à–∏–±–∫–∞: {e}")
        return False
    
    try:
        import requests
        from bs4 import BeautifulSoup
        print("   ‚úÖ Requests –∏ BeautifulSoup")
    except ImportError as e:
        print(f"   ‚ùå Requests/BS4 –æ—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def main():
    """Main test function"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Aviso Automation")
    print("=" * 50)
    
    # Configure logging
    logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
    
    tests_passed = 0
    total_tests = 3
    
    # Test 1: Configuration
    if test_configuration():
        tests_passed += 1
        print("‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –ü–†–û–®–ï–õ\n")
    else:
        print("‚ùå –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –ü–†–û–í–ê–õ–ï–ù\n")
    
    # Test 2: User Agent Manager
    if test_user_agent_manager():
        tests_passed += 1
        print("‚úÖ –¢–µ—Å—Ç User Agent: –ü–†–û–®–ï–õ\n")
    else:
        print("‚ùå –¢–µ—Å—Ç User Agent: –ü–†–û–í–ê–õ–ï–ù\n")
    
    # Test 3: Tor IP Detection
    if test_tor_ip_detection():
        tests_passed += 1
        print("‚úÖ –¢–µ—Å—Ç Tor IP: –ü–†–û–®–ï–õ\n")
    else:
        print("‚ùå –¢–µ—Å—Ç Tor IP: –ü–†–û–í–ê–õ–ï–ù\n")
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if tests_passed == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   ‚úÖ Tor –ø—Ä–æ–∫—Å–∏ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–º–µ–Ω—É IP")
        print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 2ip.ru –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP –∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ")
        print("   ‚úÖ –£–±—Ä–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2FA")
        print("   ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ 2FA —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π /2fa —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Tor")
        
        print("\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   ‚Ä¢ DNS —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫")
        print("   ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π 2FA")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–π")
        print("   ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã")
        print("   ‚Ä¢ Fail-fast –µ—Å–ª–∏ IP –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è")
        
        return True
    else:
        print("‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–µ—Å–æ—á–Ω–∏—Ü—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)